%!
% braid.ps
%
% Displays geometric braided design.
%
% Ian Cooper
% 08 November 2018
%

% convert from inches
/inch { 72 mul } bind def

% draw zigs (left) and zags (right)
/zig { cord_width strand_gap add neg braid_height zigzag } bind def
/zag { cord_width strand_gap add 2 mul braid_height zigzag } bind def
/zigzag {

    % pull the endpoint location off of the stack
    /dy exch def
    /dx exch def

    % save the current location
    currentpoint /y0 exch def /x0 exch def

    % is this a white line?
    currentlinewidth strand_line gt y0 braid_start ne and {

        % move the start point a little
        currentlinewidth 2 div dup dx dy div mul exch rmoveto
    } if

    % draw a line to the endpoint
    x0 dx add y0 dy add lineto

    % move back to the start point and to the right by one strand width
    x0 strand_gap add y0 moveto
} bind def

% draw braid section
/braid_section {

    % all stack operations, I hope nothing breaks
    dup dup black eq { strand_line } { strand_gap strand_line sub } ifelse
    setlinewidth setgray 1 setlinecap newpath dup 3 -1 roll cord_width
    strand_gap add mul exch black ne { strand_gap 2 div add } if current_x
    add current_y moveto cord_width strand_gap div 1 add cvi exch black ne
    { 1 sub } if exch repeat

    % draw the line
    stroke
} bind def

% draw straight section
/straight_section {

    % save the input parameters
    /dy exch def
    /color exch def
    /pos exch def

    % what color are we drawing?
    color black eq {

        % draw the black lines
        strand_line setlinewidth color setgray 1 setlinecap newpath
        pos cord_width strand_gap add mul current_x add current_y moveto
        cord_width strand_gap div 1 add cvi {
            0 dy rlineto strand_gap dy neg rmoveto
        } repeat
    } {

        % draw the white background
        cord_width setlinewidth color setgray 0 setlinecap newpath
        pos cord_width strand_gap add mul cord_width 2 div add
        current_x add current_y moveto
        0 dy rlineto
    } ifelse stroke
} bind def

% convenient constants
/black 0 def
/white 1 def
/left 0 def
/center 1 def
/right 2 def

% page size
/page_width 5 inch def
/page_height 9 inch def

% parameters
/cord_width 0.4 inch def        % width of a cord
/strand_line 0.8 def            % width of a strand (not inches)
/strand_gap 3.2 def             % space between strands
/braid_left 0.75 inch def       % braid section left
/braid_start 2.5 inch def       % braid section start
/braid_height 0.75 inch def     % height of a single braid section
/braid_count 3 def              % how many braid sections

% current position
/current_x braid_left def
/current_y 0 def

% move origin to top left because I like it there
0 page_height translate
-1 1 scale
180 rotate

% top straight sections
right white braid_start straight_section
left white braid_start straight_section
center white braid_start straight_section

% jump down to the lower straight section
/current_y braid_start braid_count braid_height mul add def
right white page_height current_y sub straight_section
left white page_height current_y sub straight_section
center white page_height current_y sub straight_section

% move down to the braid sections
/current_y braid_start def

% draw braid sections
braid_count {
        
    % right - zig
    //zig right white braid_section
    //zig right black braid_section

    % left - zag
    //zag left white braid_section
    //zag left black braid_section

    % center - zig
    //zig center white braid_section
    //zig center black braid_section

    % move down
    /current_y current_y braid_height add def

} repeat

% lower straight sections
right black page_height current_y sub straight_section
left black page_height current_y sub straight_section
center black page_height current_y sub straight_section

% jump back up to the top straight section
/current_y 0 def
right black braid_start straight_section
left black braid_start straight_section
center black braid_start straight_section

% display the drawing
showpage
